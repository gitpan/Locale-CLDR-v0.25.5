package Locale::CLDR::Transformations::Any::Cs_fonipa::Ko;
# This file auto generated from Data\common\transforms\cs_FONIPA-ko.xml
#	on Tue 22 Jul 10:24:32 am GMT
# XML file generated 2013-02-24 21:06:02 -0600 (Sun, 24 Feb 2013)

use version;

our $VERSION = version->declare('v0.25.5');

use v5.10;
use mro 'c3';
use utf8;
use if $^V ge v5.12.0, feature => 'unicode_strings';

use Moose;

BEGIN {
	die "Transliteration requires Perl 5.18 or above"
		unless $^V ge v5.18.0;
}

no warnings 'experimental::regex_sets';
has 'transforms' => (
	is => 'ro',
	isa => 'ArrayRef',
	init_arg => undef,
	default => sub { [
		qr/(?^um:\G.)/,
		{
			type => 'transform',
			data => [
			],
		},
		{
			type => 'conversion',
			data => [
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:b)),
					result  => q(peu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:b)),
					result  => q(b),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:bj)),
					result  => q(b),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:b)),
					result  => q(beu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:c)),
					result  => q(ti),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:c)),
					result  => q(t),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:d͡z)),
					result  => q(deuj),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:d)),
					result  => q(teu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:d)),
					result  => q(d),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:d)),
					result  => q(deu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ɛ)),
					result  => q(e),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:f)),
					result  => q(p),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:f)),
					result  => q(peu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:ɡ)),
					result  => q(g),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ɡ)),
					result  => q(geu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:ɦ)),
					result  => q(h),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ɦ)),
					result  => q(heu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:h)),
					result  => q(h),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:h)),
					result  => q(heu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:i)),
					result  => q(i),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ɪ)),
					result  => q(i),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:j)),
					result  => q(i),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:j)),
					result  => q(y),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:kvu)),
					result  => q(keub),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:ks)),
					result  => q(gseu),
					revisit => 0,
				},
				{
					before  => q((?^u:[ $])),
					after   => q(),
					replace => q((?^u:ks)),
					result  => q(j),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ks)),
					result  => q(gs),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:k)),
					result  => q(k),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:k)),
					result  => q(keu),
					revisit => 0,
				},
				{
					before  => q((?^u:[aeɛiɪoux])),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:l)),
					result  => q(ll),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:lz)),
					result  => q(lj),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:m)),
					result  => q(m),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:m)),
					result  => q(m),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[l])),
					replace => q((?^u:m)),
					result  => q(m),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:m)),
					result  => q(meu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ɲ)),
					result  => q(n),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ŋ)),
					result  => q(n),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:p)),
					result  => q(p),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:t)),
					replace => q((?^u:p)),
					result  => q(b),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:p)),
					result  => q(peu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:r̝)),
					result  => q(leusi),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:r̝)),
					result  => q(leuj),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:k)),
					replace => q((?^u:r̝)),
					result  => q(leusyu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:r̝)),
					result  => q(leuju),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:r)),
					result  => q(l),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:r)),
					result  => q(leu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:s)),
					result  => q(s),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:s)),
					result  => q(seu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:ʃ)),
					result  => q(si),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:ʃ)),
					result  => q(sy),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ʃ)),
					result  => q(syu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:t͡s)),
					result  => q(ch),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:t͡s)),
					result  => q(cheu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:t͡ʃ)),
					result  => q(ch),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:t͡ʃ)),
					result  => q(chi),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:t)),
					result  => q(t),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:t)),
					result  => q(teu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:vj)),
					result  => q(b),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:v)),
					result  => q(peu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:v)),
					result  => q(b),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:v)),
					result  => q(beu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:x)),
					result  => q(h),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:x)),
					result  => q(heu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:ɣ)),
					result  => q(h),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ɣ)),
					result  => q(heu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:z)),
					result  => q(j),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:z)),
					result  => q(seu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:z)),
					result  => q(jeu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:ʒ)),
					result  => q(j),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:v)),
					replace => q((?^u:ʒ)),
					result  => q(ju),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[ $])),
					replace => q((?^u:ʒ)),
					result  => q(si),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ʒ)),
					result  => q(syu),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q((?^u:[aeɛiɪoux])),
					replace => q((?^u:ɟ)),
					result  => q(dy),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ɟ)),
					result  => q(ti),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:ː)),
					result  => q(),
					revisit => 0,
				},
				{
					before  => q(),
					after   => q(),
					replace => q((?^u:\u0020)),
					result  => q(),
					revisit => 0,
				},
			],
		},
		{
			type => 'transform',
			data => [
				{
					from => q(Latin),
					to => q(Hangul),
				},
			]
		},
	] },
);

no Moose;
__PACKAGE__->meta->make_immutable;

1;

# vim: tabstop=4
